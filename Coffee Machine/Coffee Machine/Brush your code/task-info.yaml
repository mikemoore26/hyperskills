type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static Scanner scanner = new Scanner(System.in);
        static int milk,beans,water,cups,cupNeeded;
        static int cupsDis, money;
        static String action = "";

        public static void main(String[] args) {
    //        boolean makeC = true;
    ////       getCurrentIng();
    ////       while(makeC){
    ////           makeC = makecoffer();
    ////       }
    ////       if(cupNeeded == cups){
    ////           System.out.println("Yes, I can make that amount of coffee \n");
    ////       }else if(cupNeeded >= cups){
    ////           System.out.printf("No, I can make only %d cup(s) of coffee", cups);
    ////       }else{
    ////           System.out.printf("Yes, I can make that amount of coffee (and even %d more than that)", cupNeeded - cups);
    ////       }
            init();
            System.out.println("Write action(buy, fill, take)");
            action = scanner.nextLine();

            while(!action.equals("exit")) {

                if (action.equals("buy")) {
                    buy();
                }
                if (action.equals("fill")) {
                    fill();
                }
                if (action.equals("take")) {
                    take();
                }
                if (action.equals("remaining")) {
                    currentState();
                }
                System.out.println("Write action(buy, fill, take)");
                action = scanner.nextLine();
            }


        }

        public static  void init(){
            money = 550;
            water = 400;
            milk = 540;
            beans = 120;
            cupsDis = 9;
        }
        public static void currentState(){
            System.out.printf("The coffee maker has:\n"+
                    "%d of water\n" +
                    "%d of milk\n" +
                    "%d of coffee beans\n" +
                    "%d of disposable cups\n" +
                    "%d of money\n", water,milk,beans,cupsDis,money);
        }

        public static void take(){
            System.out.printf("I Gave you %d", money);
            money = 0;
        }

        public static void fill(){
            System.out.println("water?");
            water += scanner.nextInt();
            System.out.println("Milk?");
            milk += scanner.nextInt();
            System.out.println("beans");
            beans +=scanner.nextInt();
            System.out.println("Cups?");
            cupsDis += scanner.nextInt();
        }

        public static void buy(){
            System.out.println("what do you want to buy?");
            String choice = scanner.nextLine() ;
            switch(choice) {
                case "1":
                    // espresso
                    if(water >= 250){
                        if(beans >= 16){
                                water -= 250;
                                beans -= 16;
                                cupsDis--;
                                money += 4;

                        }
                    }
                    break;
                case "2":
                    // latte
                    if(water >= 350){
                        if(beans >= 20){
                            if(milk >= 75){
                                water -= 350;
                                beans -= 20;
                                milk -= 75;
                                cupsDis--;
                                money += 7;
                            }
                        }
                    }
                    break;
                case "3":
                    //capp
                    if(water >= 200){
                        if(beans >= 12){
                            if(milk >= 100){
                                water -= 200;
                                beans -= 12;
                                milk -= 100;
                                cupsDis--;
                                money += 6;
                            }
                        }
                    }
                    break;
                default:
                    break;
            }

        }

        public static void serving(int num ){
            int water = num * 200;
            int milk = 50 * num;
            int beans = 15 * num;
            System.out.printf("for %d cups of coffee\n" +
                    "%d cups of water \n %d ml of milk \n %d g of coffee beans  ",num, water,milk,beans);
        }

        public static void getCurrentIng(){
            System.out.println("Write how many ml of water the coffee machine has:");
            water = scanner.nextInt();
            System.out.println("Write how many ml of milk the coffee machine has:");
            milk = scanner.nextInt();
            System.out.println("Write how many grams of coffee beans the coffee machine has:");
            beans = scanner.nextInt();
            System.out.println("Write how many cups of coffee you will need:");
            cupNeeded = scanner.nextInt();
        }

        public static boolean makecoffer() {
            if(water >= 200){
                if(beans >= 15){
                    if(milk >= 50){
                        water -= 200;
                        beans -= 15;
                        milk -= 50;
                        cups++;
                        return true;
                    }
                }
            }

            return false;
        }

        public static void makeCoffee(){
            for(int i = 0; i <= cups; i++){

            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
