type: edu
custom_name: stage7
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.correct().also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.wrong(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.correct();
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.wrong("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (!result.isCorrect) {
                            return CheckResult.wrong(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.correct();
        }
    }

    fun dialogTest(vararg phrases: Phrase, consoleArgs: Array<String> = emptyArray()): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
                .addArguments(*consoleArgs)
    }
  learner_created: false
- name: test/common/FlashcardsStage7Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import flashcards.Main
    import java.io.File


    abstract class FlashcardsStage7Test : StageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("capitalsNew.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exportCards("capitalsNew.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    addCapital("France", "Paris"),
                    addCapital("Russia", "Moscow"),
                    askCards("France", "??", ""),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    addCapital("Japan", "Tokyo"),
                    askCards("Moscow", "Paris", "Tokyo"),
                    exit(),
                    exportArg(3),
                    consoleArgs = arrayOf("-import", "capitals.txt", "-export", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(3, *capitals()),
                    askCards("Moscow", "Paris", "Tokyo"),
                    removeCapital("Japan"),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt", "-import", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    exit(),
                    consoleArgs = arrayOf("-import", "capitals.txt")
            )

            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun importArg(count: Int, vararg cards: Pair<String, String>) =
                containing("$count cards have been loaded",
                        updateContext = { ctx ->
                            cards.forEach { (card, def) ->
                                ctx.addCard(card, def)
                                ctx.wrongCards.removeAll(listOf(card))
                            }
                        })

        fun exportArg(count: Int) = containing("$count cards have been saved")


        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.wrong("The log file $fileName does not exist.")
                        }
                        CheckResult.correct();
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.correct();
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx -> ctx.removeCard(card) })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.wrong("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.wrong("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.correct();
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.wrong("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnweredCapitals.clear()
                                    wrongAnweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage7Test;

    public class FlashcardsTest extends FlashcardsStage7Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;

    import java.io.*;
    import java.util.*;

    public class Main {
        static String s = "";

        static String inFile = "";
        static List<String> log = new ArrayList<>();
        static Scanner scanner = new Scanner(System.in);
        static Scanner scanner1 = new Scanner(System.in);
        static List<FlashCard> cards = new ArrayList<FlashCard>();

        public static void main(String[] args) throws IOException {


            while(true) {
                displayMenu();
            }

        }

        public static void displayMenu() throws IOException {
            /*add a card: add,
            remove a card: remove,
            load cards from file: import,
            save cards to file: export,
            ask for a definition of some random cards: ask,
            exit the program: exit.

             */

            print("Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):");

            String selection = scanner1.nextLine();
            log.add(selection);

            switch (selection){
                case "add":
                    makeCards();
                    break;
                case "remove":
                    remove();
                    break;
                case "import":
                    importFile();
                    break;
                case "export":
                    exportFile();
                    break;
                case "ask":
                    ask();
                    break;
                case "log":
                    log();
                    break;
                case "hardest card":
                    hardestCard();
                    break;
                case "reset stats":
                    reset();
                    break;
                case "exit":
                    print("Bye Bye");

                    System.exit(0);
                default:
                    break;
            }
        }

        public static void reset(){
            for(FlashCard card: cards){
                card.setMistake(0);
            }
            print("Card statistics has been reset.");
        }

        public static void hardestCard(){
            int hard = 0;
            ArrayList<FlashCard> hardestCard = new ArrayList<FlashCard>();

            for(FlashCard card : cards){
                if(card.getMistake() > hard){
                    hard = card.getMistake();
                }
            }

            for(FlashCard card : cards){
                if(card.getMistake() == hard && card.getMistake()>0){
                    hardestCard.add(card);
                }
            }

            if(hardestCard.size() == 0){
                print("There are no cards with errors.");

            }else if(hardestCard.size() > 1){
                StringBuilder s = new StringBuilder();
                for(FlashCard card : hardestCard){
                    s.append(String.format("\"%s\",", card.getTerm()));
                }
                print(String.format("The Hardest card are %s, You have %d errors answering them", s.toString(), hard));
            }else{
                print(String.format("The Hardest card is \"%s\". %d ", hardestCard.get(0).getTerm(),hard));
            }
        }


        public static void importFile() {
            String term = "";
            String def = "";
            int mistake = 0;

            File file = getFile();
            int count = 0;

            Scanner fileScanner = null;
            if(file != null){
                try {
                    fileScanner = new Scanner(file);
                    while(fileScanner.hasNextLine()){
                        term = fileScanner.next();
                        def = fileScanner.next();
                        mistake = fileScanner.nextInt();
                        fileScanner.nextLine();

                        if(add(term,def,mistake)) {
                            count++;
                        }
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                    print("File not found.");
                    return;
                }

                print(String.format("%d cards have been loaded.", count));
            }

        }

        public static void log()  {
            File file = getFile();
            int count = 0;

            FileWriter fileWriter  = null;
            if(file != null) {
                try {
                    fileWriter = new FileWriter(file);
                    for (String logEntry : log) {
                        fileWriter.write(logEntry);
                        count++;
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                print(String.format("%d Logs have been saved", count));
            }
        }

        public static void exportFile()  {
            File file = getFile();
            int count = 0;

            PrintWriter fileWriter  = null;
            if(file != null) {
                try {
                    fileWriter = new PrintWriter(file);
                    for (FlashCard temp: cards) {

                        fileWriter.printf("%s %s %d\n",temp.getTerm() , temp.getDef(), temp.getMistake());
                        count++;
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

                print(String.format("%d cards have been saved", count));
                fileWriter.close();
            }
        }

        public static File getFile(){
            print("File name:");
            String fileName = scanner1.nextLine();
            log.add(fileName);
            return new File(fileName);
        }

        public static void ask(){
            print("How many times to ask?");

            int amt = scanner.nextInt();
            log.add(String.valueOf(amt));
            int i = 0;
            while(i < amt) {
                quiz(getCard());
                i++;
            }
        }

        private static FlashCard getCard() {
            Random rand = new Random();
            int r = rand.nextInt(cards.size());


            return cards.get(r);
        }


        public static void quiz(FlashCard card){
            String cor ="";
            print(String.format("Print the definition of \"%s\":", card.getTerm()));

            String ans = scanner1.nextLine();

            if(ans.equals(card.getDef())){
                print("Correct answer.");

            }else{

                print(String.format("Wrong answer, the correct one is \"%s\"", card.getDef()));
                card.wrongAnswer();

                for(FlashCard temp2 : cards) {

                    if (ans.equals(temp2.getDef())) {
                        cor = temp2.getTerm();
                        print(String.format(" you've just written the definition of \"%s\"", cor));

                    }
                }
            }
        }

        public static void remove(){
            print(String.format("The card"));

            String term = scanner1.nextLine();
            log.add(term);

            Iterator<FlashCard> iter = cards.iterator();
            while (iter.hasNext()){
                FlashCard card = iter.next();
                if(card.getTerm().equals(term)){
                    print(String.format("\"%s\" has been removed", term));

                    cards.remove(card);
                    return;
                }
            }
    //        for(FlashCard card : cards){
    //            if(card.getTerm().equals(term)){
    //                print(String.format("\"%s\" has been removed", term));
    //
    //                cards.remove(card);
    //            }
    //        }
                print(String.format("Can't remove \"%s\": there's no such card", term));
        }


        public static void add(String term, String def){
                cards.add(new FlashCard(term, def));
                print(String.format("(\"%s\": \"%s\") has been added", term, def));

        }

        public static boolean add(String term, String def, int mis){
            for (FlashCard card : cards){
                if(card.getTerm().equals(term) && !(card.getDef().equals(def))) {
                    card.setDef(def);
                    return true;
                }else if(card.getTerm().equals(term)) {
                    //print("Can not add this card");
                    return false;
                }
            }
            cards.add(new FlashCard(term, def, mis));
            //print(String.format("(\"%s\": \"%s\") has been added", term, def));
            return true;

        }

        public static void  makeCards(){

            print("The card :");

            String term = scanner1.nextLine();
            log.add(term);
            for(FlashCard card: cards){
                if(card.getTerm().equals(term)){
                    print(String.format("The Card \"%s\" already exists.", term));
                    return;
                }
            }
                print("The Definition of the card");
                String def = scanner1.nextLine();
                log.add(def);

            for(FlashCard card: cards) {
                if (card.getDef().equals(def)) {
                    print(String.format("The definition \"%s\" already exists.", def));
                    return;
                }
            }

                add(term, def);
            }



    //    public static void quiz(){
    ////        String cor ="";
    ////        for(Map.Entry<String,String> temp: cards.entrySet()){
    ////             term = temp.getKey();
    ////             def = temp.getValue();
    ////
    ////             print(String.format("Print the definition of \"%s\":", term));
    ////
    ////
    ////            ans = scanner1.nextLine();
    ////
    ////            if (ans.equals(def)) {
    ////                print("correct answer");
    ////
    ////            } else {
    ////                print(String.format("Wrong answer, the correct one is \"%s\"", def));
    ////
    ////                for(Map.Entry<String, String> temp2 : cards()){
    ////
    ////                    if(ans.equals(temp2.getValue())) {
    ////                        cor = temp2.getKey();
    ////                        print(String.format(" you've just written the definition of \"%s\"", cor));
    ////                    }
    ////
    ////                }
    ////                System.out.println();
    ////            }
    ////        }
    ////    }

        public static void print(String s){
            System.out.println(s);
            log.add(s);
        }
    }
  learner_created: true
- name: src/flashcards/TestMain.java
  visible: true
  text: |
    package flashcards;

    import java.io.*;
    import java.util.*;

    public class TestMain {
        static String def = "";
        static String term = "";
        static String ans = "";
        static String inFile = "";
        static Scanner scanner = new Scanner(System.in);
        static Scanner scanner1 = new Scanner(System.in);
        static Map<String, String> cards = new LinkedHashMap<>();

        public static void TestMain(String[] args) throws IOException {


            while(true) {
                displayMenu();
            }

        }

        public static void displayMenu() throws IOException {
            /*add a card: add,
            remove a card: remove,
            load cards from file: import,
            save cards to file: export,
            ask for a definition of some random cards: ask,
            exit the program: exit.

             */

            System.out.println("Input the action (add, remove, import, export, ask, exit):");
            String selection = scanner1.nextLine();

            switch (selection){
                case "add":
                    makeCards();
                    break;
                case "remove":
                    remove();
                    break;
                case "import":
                    importFile();
                    break;
                case "export":
                    exportFile();
                    break;
                case "ask":
                    ask();
                    break;
                case "exit":
                    System.out.println("Bye Bye");
                    System.exit(0);
                default:
                    break;
            }
        }


        public static void importFile() {
            File file = getFile();
            int count = 0;

            Scanner fileScanner = null;
            if(file != null){
                try {
                    fileScanner = new Scanner(file);
                    while(fileScanner.hasNext()){
                        term = fileScanner.nextLine();
                        def = fileScanner.nextLine();
                        cards.put(term,def);
                        count++;
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                    System.out.println("File not found.");
                    return;
                }

                System.out.printf("%d cards have been loaded.\n", count);
            }

        }

        public static void exportFile()  {
            File file = getFile();
            int count = 0;

            PrintWriter fileWriter  = null;
            if(file != null) {
                try {
                    fileWriter = new PrintWriter(file);
                    for (Map.Entry<String, String> temp: cards.entrySet()) {
                        fileWriter.printf("%s\n%s\n", temp.getKey(),temp.getValue() );
                        count++;
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

                System.out.printf("%d cards have been saved\n", count);
                fileWriter.close();
            }



        }

        public static File getFile(){
            System.out.println("File name:");
            String fileName = scanner1.nextLine();
            return new File(fileName);
        }

        public static void ask(){
            System.out.println("How many times to ask?");
            int amt = scanner.nextInt();
            int i = 0;
            while(i < amt) {
                term = getCard();
                def = cards.get(term);
                quiz(term, def);
                i++;
            }
        }

        private static String getCard() {
            Random rand = new Random();
            int r = rand.nextInt(cards.size());

            Set<String> cardsKey = cards.keySet();
            String[] cardsArr = cardsKey.toArray(new String[cards.size()]);

            return cardsArr[r];
        }


        public static void quiz(String term , String def){
            String cor ="";
            System.out.printf("Print the definition of \"%s\":\n", term);
            ans = scanner1.nextLine();

            if(ans.equals(def)){
                System.out.println("Correct answer.");
            }else{

                System.out.printf("Wrong answer, the correct one is \"%s\"", def);

                for(Map.Entry<String, String> temp2 : cards.entrySet()) {

                    if (ans.equals(temp2.getValue())) {
                        cor = temp2.getKey();
                        System.out.printf(" you've just written the definition of \"%s\"\n", cor);
                    }
                }
                System.out.println();
            }
        }

        public static void remove(){
            System.out.println("The card");
            term = scanner1.nextLine();

            if(cards.containsKey(term)){
                System.out.printf("\"%s\" has been removed\n", term);
                cards.remove(term);
            }else{
                System.out.printf("Can't remove \"%s\": there's no such card\n", term);
            }
        }


        public static void add(String term, String def){
            cards.put(term, def);
            System.out.printf("(\"%s\": \"%s\") has been added\n", term, def);
        }

        public static void  makeCards(){

            System.out.println("The card :");
            term = scanner1.nextLine();

            if(cards.containsKey(term)) {
                System.out.printf("The card \"%s\" already exists.\n", term);
                return;
            }

            System.out.println("The Definition of the card");
            def = scanner1.nextLine();
            if (cards.containsValue(def)) {
                System.out.printf("The definition \"%s\" already exists.\n", def);
                return;
            }

            add(term, def);
        }



        public static void quiz(){
            String cor ="";
            for(Map.Entry<String,String> temp: cards.entrySet()){
                term = temp.getKey();
                def = temp.getValue();

                System.out.printf("Print the definition of \"%s\":\n", term);
                ans = scanner1.nextLine();

                if (ans.equals(def)) {
                    System.out.println("correct answer");
                } else {
                    System.out.printf("Wrong answer, the correct one is \"%s\"", def);

                    for(Map.Entry<String, String> temp2 : cards.entrySet()){

                        if(ans.equals(temp2.getValue())){
                            cor = temp2.getKey();
                            System.out.printf(" you've just written the definition of \"%s\"\n", cor);
                        }

                    }
                    System.out.println();
                }
            }
        }
    }
  learner_created: true
- name: src/flashcards/FlashCard.java
  visible: true
  text: |
    package flashcards;

    public class FlashCard {

        private String term;
        private String def;
        private int mistake;

        public FlashCard(String term, String def) {
            this.term = term;
            this.def = def;
            this.mistake = 0;
        }

        public FlashCard(String term, String def, int mistake) {
            this.term = term;
            this.def = def;
            this.mistake = mistake;
        }

        public String getTerm() {
            return term;
        }

        public void setTerm(String term) {
            this.term = term;
        }

        public String getDef() {
            return def;
        }

        public void setDef(String def) {
            this.def = def;
        }

        public int getMistake() {
            return mistake;
        }

        public void setMistake(int mistake) {
            this.mistake = mistake;
        }

        public void wrongAnswer(){
            mistake++;
        }

        @Override
        public String toString() {
            return  term;
        }
    }
  learner_created: true
- name: export
  visible: true
  learner_created: true
- name: capitalsNew.txt
  visible: true
  learner_created: true
- name: capitals.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/238/implement
status: Solved
record: 8
